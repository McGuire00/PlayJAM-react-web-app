{"ast":null,"code":"const clientId = \"573610200a7948589d19a98ba8dcbc7a\";\nconst redirectUri = \"http://localhost:3000/callback\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check for accessToken match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); // clears parameters which allows to grab a new access token when it expires\n\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri,\n        image: track.album.images[2].url\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: \"POST\",\n        body: JSON.springify({\n          name: name\n        }).then(response => response.json()).then(jsonResponse => {\n          const playlistId = jsonResponse.id;\n          return fetch(`https://api.spotify.com//v1/users/${userId}/playlists/${playlistId}/tracks`, {\n            headers: headers,\n            method: \"POST\",\n            body: JSON.stringify({\n              uris: trackUris\n            })\n          });\n        })\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/deron/Desktop/PlayJAM-react-web-app/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","image","images","url","savePlaylist","trackUris","length","userId","method","body","JSON","springify","playlistId","stringify","uris"],"mappings":"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","sourcesContent":["const clientId = \"573610200a7948589d19a98ba8dcbc7a\";\nconst redirectUri = \"http://localhost:3000/callback\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // check for accessToken match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n\n      // clears parameters which allows to grab a new access token when it expires\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n          image: track.album.images[2].url,\n        }));\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.springify({ name: name })\n            .then((response) => response.json())\n            .then((jsonResponse) => {\n              const playlistId = jsonResponse.id;\n              return fetch(\n                `https://api.spotify.com//v1/users/${userId}/playlists/${playlistId}/tracks`,\n                {\n                  headers: headers,\n                  method: \"POST\",\n                  body: JSON.stringify({ uris: trackUris }),\n                }\n              );\n            }),\n        });\n      });\n  },\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}