{"ast":null,"code":"var _jsxFileName = \"/Users/deron/Desktop/PlayJAM-react-web-app/src/Components/App/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: [],\n      term: \"\"\n    }; // bindings\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"PLAY\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"jam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n            onSearch: this.search\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            className: \"playlist\",\n            playlistName: this.state.playlistName,\n            playlistTracks: this.state.playlistTracks,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/deron/Desktop/PlayJAM-react-web-app/src/Components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","App","Component","constructor","props","state","searchResults","playlistName","playlistTracks","term","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","track","tracks","find","savedTrack","id","push","setState","filter","currentTrack","name","trackUris","map","uri","then","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\n\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: [],\n      term: \"\",\n    };\n\n    // bindings\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter((currentTrack) => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map((track) => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({ playlistName: \"New Playlist\", playlistTracks: [] });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          PLAY<span className=\"highlight\">jam</span>\n        </h1>\n        <div className=\"App\">\n          {/* <SearchBar onSearch={this.search} /> */}\n          <div className=\"App-playlist\">\n            <SearchBar onSearch={this.search} />\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n\n            <Playlist\n              className=\"playlist\"\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}